# frozen_string_literal: true

# ===================================================================================
# Copyright (c) 2024, Mabrains LLC
# Licensed under the GNU Lesser General Public License, Version 3.0 (the "License");
# you may not use this file except in compliance with the License.

#                    GNU Lesser General Public License
#                       Version 3, 29 June 2007

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as published
# by the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.
# SPDX-License-Identifier: LGPL-3.0
# ===================================================================================

#=================================================================================================================
# ------------------------------------------ GENERIC TECH LVS RULE DECK ------------------------------------------
#=================================================================================================================

require 'time'
require 'logger'
require 'etc'

exec_start_time = Time.now

logger = Logger.new($stdout)

logger.formatter = proc do |_severity, datetime, _progname, msg|
  "#{datetime}: Memory Usage (" + `pmap #{Process.pid} | tail -1`[10, 40].strip + ") : #{msg}
"
end

#================================================
#----------------- FILE SETUP -------------------
#================================================

logger.info("Starting running GENERIC TECH Klayout LVS runset on #{$input}")
logger.info("Ruby Version for klayout: #{RUBY_VERSION}")

if $input
  if $topcell
    source($input, $topcell)
  else
    source($input)
  end
end

logger.info('Loading database to memory is complete.')

if $report
  logger.info("GENERIC TECH Klayout LVS runset output at: #{$report}")
  report_lvs($report)
else
  layout_dir = Pathname.new(RBA::CellView.active.filename).parent.realpath
  layout_dir.join("#{source.cell_name}.lvsdb").to_s
  logger.info("GENERIC TECH Klayout LVS runset output at default location: #{source.cell_name}.lvsdb")
  report_lvs($report_path)
end

#================================================
#------------------ SWITCHES --------------------
#================================================

logger.info('Evaluate switches.')

def bool_check?(obj)
  obj.to_s.downcase == 'true'
end



#=== NET NAMES OPTION ===
# true: use net names instead of numbers
# false: use numbers for nets
SPICE_WITH_NET_NAMES = !bool_check?($no_net_names)

logger.info("Extracted netlist with net names: #{SPICE_WITH_NET_NAMES}")

#=== COMMENTS OPTION ===
# true: put in comments with details
# false: no comments
SPICE_WITH_COMMENTS = bool_check?($spice_comments)

logger.info("Extracted netlist with comments in details: #{SPICE_WITH_COMMENTS}")

# NET_ONLY
NET_ONLY = bool_check?($net_only)

logger.info("Selected NET_ONLY option: #{NET_ONLY}")

# TOP_LVL_PINS
TOP_LVL_PINS = bool_check?($top_lvl_pins)

logger.info("Selected TOP_LVL_PINS option: #{TOP_LVL_PINS}")

# COMBINE
COMBINE_DEVICES = bool_check?($combine_devices)

logger.info("Selected COMBINE DEVICES option: #{COMBINE_DEVICES}")

# PURGE
PURGE = bool_check?($purge)

logger.info("Selected PURGE option: #{PURGE}")

# PURGE_NETS
PURGE_NETS = bool_check?($purge_nets)

logger.info("Selected PURGE_NETS option: #{PURGE_NETS}")

# SIMPLIFY
SIMPLIFY = !bool_check?($no_simplify)

logger.info("Selected SIMPLIFY option: #{SIMPLIFY}")

#=== PRINT DETAILS ===
logger.info("Verbose mode: #{$verbose}")
if $verbose == 'true'
  verbose(true)
else
  verbose(false)
end

#=== RUN MODE ===
case $run_mode
when 'deep'
  #=== HIER MODE ===
  deep
  logger.info('deep  mode is enabled.')
else
  #=== FLAT MODE ===
  flat
  logger.info('flat  mode is enabled.')
end

#================================================
# --------------- CUSTOM CLASSES ----------------
#================================================

# %include rule_decks/custom_classes.lvs

# Instantiate a reader using the new delegate
reader = RBA::NetlistSpiceReader.new(SubcircuitModelsReader.new)

#=== GET NETLIST ===
unless NET_ONLY
  if $schematic
    schematic($schematic, reader)
    logger.info("Netlist file: #{$schematic}")
  else
    exts = %w[spice cdl]
    candidates = exts.map { |ext| "#{source.cell_name}.#{ext}" }
    netlists = candidates.select { |f| File.exist?(f) }
    if netlists.empty?
      error("Netlist not found, tried: #{candidates}")
    else
      schematic(netlists[0], reader)
      logger.info("Netlist file: #{netlists[0]}")
    end
  end
end

# Instantiate a writer using the new delegate
custom_spice_writer = RBA::NetlistSpiceWriter.new(SubcircuitModelsWriter.new)
custom_spice_writer.use_net_names = SPICE_WITH_NET_NAMES
custom_spice_writer.with_comments = SPICE_WITH_COMMENTS

if $target_netlist
  logger.info("LVS extracted netlist at: #{$target_netlist}")
  target_netlist($target_netlist, custom_spice_writer,
                 "Extracted by KLayout with GENERIC TECH LVS runset on : #{Time.now.strftime('%d/%m/%Y %H:%M')}")
else
  layout_dir = Pathname.new(RBA::CellView.active.filename).parent.realpath
  netlist_path = layout_dir.join("#{source.cell_name}_extracted.cir")
  target_netlist(netlist_path.to_s, custom_spice_writer,
                 "Extracted by KLayout with GENERIC TECH LVS runset on : #{Time.now.strftime('%d/%m/%Y %H:%M')}")
  logger.info("GENERIC TECH Klayout LVS extracted netlist file at: #{source.cell_name}_extracted.cir")
end

#================================================
#------------- LAYERS DEFINITIONS ---------------
#================================================

# %include rule_decks/layers_definitions.lvs

#================================================================
#------------------------- MAIN RUNSET --------------------------
#================================================================

logger.info('Starting GENERIC TECH LVS runset')

#================================================
#------------- LAYERS DERIVATIONS ---------------
#================================================

logger.info('Starting LVS Layers Derivations Step')

# %include rule_decks/devices_derivations.lvs

#================================================
#------------ DEVICES CONNECTIVITY --------------
#================================================

logger.info('Starting LVS Connectivity Step')

# %include rule_decks/devices_connections.lvs

#================================================
# ------------ DEVICES EXTRACTION ---------------
#================================================

logger.info('Starting LVS Extraction Step')

# %include rule_decks/devices_extraction.lvs


#==================================================
# ------------ COMPARISON PREPARATIONS ------------
#==================================================

logger.info('Starting GenericPDK LVS Options Preparations')

# === Extract Netlist Only ===
netlist if NET_ONLY
return if NET_ONLY

# === Aligns the extracted netlist vs. the schematic ===
align

#=== NETLIST OPTIONS ===
# SIMPLIFY
netlist.simplify if SIMPLIFY
schematic.simplify if SIMPLIFY

# TOP_LVL_PINS
netlist.make_top_level_pins if TOP_LVL_PINS
schematic.make_top_level_pins if TOP_LVL_PINS

# COMBINE_DEVICES
netlist.combine_devices if COMBINE_DEVICES
schematic.combine_devices if COMBINE_DEVICES

# PURGE
netlist.purge if PURGE
schematic.purge if PURGE

# PURGE_NETS
netlist.purge_nets if PURGE_NETS
schematic.purge_nets if PURGE_NETS

#=== IGNORE EXTREME VALUES ===
max_res(1e9)

# === COMPARISON === 
logger.info('Starting GenericPDK LVS Comparison')
compare

#================================================
#------------- COMPARISON RESULTS ---------------
#================================================

exec_end_time = Time.now
run_time = exec_end_time - exec_start_time
logger.info(format('LVS Total Run time %f seconds', run_time))

if !compare
  logger.info('xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx')
  logger.error("ERROR : Netlists don't match")
  logger.info('xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx')
else
  logger.info('==========================================')
  logger.info('INFO : Congratulations! Netlists match.')
  logger.info('==========================================')
end
